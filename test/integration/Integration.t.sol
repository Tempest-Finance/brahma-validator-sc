// SPDX-License-Identifier: MIT

pragma solidity >=0.8.24;
import { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';
import { Test } from 'forge-std/Test.sol';
import { BridgeOracle } from 'test/integration/BridgeOracle.t.sol';
import { Validator } from 'src/Validator.sol';
import { MultiSendCallOnly } from 'src/MultisendCallOnly.sol';

interface ISafeWallet {
    function execTransactionFromModuleReturnData(
        address to,
        uint256 value,
        bytes memory data,
        uint8 operation
    ) external returns (bool success, bytes memory returnData);
}

contract IntegrationTest is Test {
    address internal _executorPlugin = 0xb92929d03768a4F8D69552e15a8071EAf8E684ed;
    address internal _safeWallet = 0x150FC1542B18Fc2F30b383c9d13f71B0930F4255;
    address internal _token0 = 0x4200000000000000000000000000000000000006;
    address internal _token1 = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913;
    address internal _swapRouter = 0xBE6D8f0d05cC4be24d5167a3eF062215bE6D18a5;
    address internal _pool = 0xb2cc224c1c9feE385f8ad6a55b4d94E92359DC59;

    address internal _ethOracle = 0x71041dddad3595F9CEd3DcCFBe3D1F4b0a16Bb70;
    address internal _usdcOracle = 0x7e860098F58bBFC8648a4311b374B1D669a2bc6B;
    address internal _sequencerOracle = 0xBCF85224fc0756B9Fa45aA7892530B47e10b6433;

    address internal _gause = 0xF33a96b5932D9E9B9A0eDA447AbD8C9d48d2e0c8;

    MultiSendCallOnly internal _multiSendCallOnly;
    BridgeOracle internal _bridgeOracle;
    Validator internal _validator;

    function setUp() public {
        vm.createSelectFork('https://base.blockpi.network/v1/rpc/286eabc42a0f15b60f0ff2ab59afc08225381836', 28995685);
        _setUpContracts();
    }

    function _setUpContracts() internal {
        _bridgeOracle = new BridgeOracle(
            _ethOracle,
            _usdcOracle,
            _sequencerOracle,
            1 hours,
            1 hours,
            1 hours,
            true,
            'ETH/USDC',
            address(this)
        );

        _validator = new Validator();
        TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(
            address(_validator),
            address(this),
            abi.encodeWithSelector(Validator.initialize.selector, address(this))
        );
        _validator = Validator(address(proxy));
        _validator.registerOracle(_token0, _token1, address(_bridgeOracle));
        _multiSendCallOnly = new MultiSendCallOnly(address(_validator));
    }

    function testIntegration() public {
        vm.startPrank(_executorPlugin);
        // approve and swap
        ISafeWallet(_safeWallet).execTransactionFromModuleReturnData(
            address(_validator), // target is now the validator
            0, // value
            _getMultiSendSwapCalldata(), // data
            1 // operation
        );

        // approve and mint
        ISafeWallet(_safeWallet).execTransactionFromModuleReturnData(
            address(_validator), // target is now the validator
            0, // value
            _getMultiSendMintCalldata(), // data
            0 // operation
        );

        // stake (this step call gause directly)
        ISafeWallet(_safeWallet).execTransactionFromModuleReturnData(
            _gause, // target
            0, // value
            _getStakeCalldata(), // data
            1 // operation
        );

        // unstake and close position
        ISafeWallet(_safeWallet).execTransactionFromModuleReturnData(
            _gause, // target
            0, // value
            _getUnstakeCalldata(), // data
            1 // operation
        );

        vm.stopPrank();
    }

    function _getMultiSendSwapCalldata() internal pure returns (bytes memory) {
        return
            hex'8d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001f200833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000be6d8f0d05cc4be24d5167a3ef062215be6d18a5000000000000000000000000000000000000000000000000000000000000110c00be6d8f0d05cc4be24d5167a3ef062215be6d18a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104a026383e000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000064000000000000000000000000150fc1542b18fc2f30b383c9d13f71b0930f42550000000000000000000000000000000000000000000000000000000067ff3ed7000000000000000000000000000000000000000000000000000000000000110c0000000000000000000000000000000000000000000000000000027bc3bc907100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
    }

    function _getMultiSendMintCalldata() internal pure returns (bytes memory) {
        return
            hex'8d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001f200833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000be6d8f0d05cc4be24d5167a3ef062215be6d18a5000000000000000000000000000000000000000000000000000000000000110c00be6d8f0d05cc4be24d5167a3ef062215be6d18a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104a026383e000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000064000000000000000000000000150fc1542b18fc2f30b383c9d13f71b0930f42550000000000000000000000000000000000000000000000000000000067ff3ed7000000000000000000000000000000000000000000000000000000000000110c0000000000000000000000000000000000000000000000000000027bc3bc907100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
    }

    function _getStakeCalldata() internal pure returns (bytes memory) {
        return hex'b6b55f250000000000000000000000000000000000000000000000000000000000ac76be';
    }

    function _getUnstakeCalldata() internal pure returns (bytes memory) {
        return
            hex'8d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000035d00f33a96b5932d9e9b9a0eda447abd8c9d48d2e0c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000242e1a7d4d0000000000000000000000000000000000000000000000000000000000ac76be00940181a94a35a4569e4529a3cdfb74e38fd9863100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000006f00b52f64a041e7623a9747ecbda91d619e2caa0000000000000000000000000000000000000000000000000000007a3dfe6d6100827922686190790b37229fd06084350e74485b72000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a40c49ccbe0000000000000000000000000000000000000000000000000000000000ac76be000000000000000000000000000000000000000000000000000000003e61718d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067ff6bab00827922686190790b37229fd06084350e74485b7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084fc6f78650000000000000000000000000000000000000000000000000000000000ac76be000000000000000000000000150fc1542b18fc2f30b383c9d13f71b0930f425500000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff00827922686190790b37229fd06084350e74485b720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002442966c680000000000000000000000000000000000000000000000000000000000ac76be000000';
    }
}
